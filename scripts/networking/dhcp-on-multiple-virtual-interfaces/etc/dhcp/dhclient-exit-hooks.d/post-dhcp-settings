#!/bin/bash
#
. /usr/local/sbin/networking_defs.sh


# Only update if
# 1. Bound (update everything)
# 2. Otherwise if old ip address is different than current or
#    old routers is different than current
# 3. If GW/IF_PUB0 changes, update also IF_PUB1/IF_PUB2, if running
# 4. Don't update IF_PUB1/IF_PUB2 if no GW


# Function for checking if IF_PUB1/IF_PUB2 interfaces
# are up and running all the relevant scripts on them
# if needed.
conf_ifaces_on_gw_change ()
{
    if [ $(if_has_ip "$IF_PUB1") = "1" ];
    then
	logger "Running $IF_PUB1 interface scripts due to gw change"
	/usr/local/sbin/policy_route_dhcp.sh "$IF_PUB1"
	/usr/local/sbin/firewall_interface1.sh

	if [ -n "$USE_DY_FI" ];
	then
	    /usr/local/sbin/update_dy_fi_address.sh "$IF_PUB1" "$IF_PUB1_DY_NAME"
	fi
    fi
    if [ $(if_has_ip "$IF_PUB2") = "1" ];
    then
	logger "Running $IF_PUB2 interface scripts due to gw change"
	/usr/local/sbin/policy_route_dhcp.sh "$IF_PUB2"
	/usr/local/sbin/firewall_interface2.sh

	if [ -n "$USE_DY_FI" ];
	then
	    /usr/local/sbin/update_dy_fi_address.sh "$IF_PUB2" "$IF_PUB2_DY_NAME"
	fi
    fi
}


# Get new routers from file, if time difference small enough
new_file_routers=""
TIME_DIFF=$((`date +%s` - `stat -c %Y $ROUTE_INFO_PATH/$interface.dat`))

if [ "$TIME_DIFF" -lt "$NEW_ROUTERS_TIME_TRESHOLD" ];
then
    new_file_routers=$(head -n 1 "$ROUTE_INFO_PATH/$interface.dat")
fi


case "$reason" in
    BOUND|RENEW|REBIND|REBOOT|TIMEOUT)

	# Usual case: First ones are BOUND, rest RENEW
	if [ "$interface" = "$IF_PUB0" ];
	then
	    logger "$interface ($reason): IP: $old_ip_address -> $new_ip_address; GW: $old_routers -> $new_file_routers"
	    sync

	    if [ "$reason" = "BOUND" -o "$reason" = "REBOOT" ];
	    then
		sync

		if [ -n "$USE_OPENVPN" ];
		then
		    /usr/local/sbin/setup_vpn.sh
		    /usr/local/sbin/firewall_vpn.sh
		fi
		conf_ifaces_on_gw_change
		
	    elif [ "$old_ip_address" != "$new_ip_address" -o "$old_routers" != "$new_file_routers" ];
	    then
		sync

		if [ -n "$USE_OPENVPN" ];
		then
		    /usr/local/sbin/setup_vpn.sh
		    /usr/local/sbin/firewall_vpn.sh
		fi
		conf_ifaces_on_gw_change
	    fi
	    if [ -n "$USE_DY_FI" ];
	    then
		/usr/local/sbin/update_dy_fi_address.sh "$interface" "$IF_PUB0_DY_NAME"
	    fi
	fi


	if [ "$interface" = "$IF_PUB1" ];
	then
	    logger "$interface ($reason): IP: $old_ip_address -> $new_ip_address; GW: $old_routers -> $new_file_routers"
	    sync
	fi
	if [ "$interface" = "$IF_PUB1" -a $(if_has_ip "$IF_PUB0") = "1" ];
	then
	    if [ "$reason" = "BOUND" -o "$reason" = "REBOOT" ];
	    then
		/usr/local/sbin/policy_route_dhcp.sh "$interface"
		/usr/local/sbin/firewall_interface1.sh

	    elif [ "$old_ip_address" != "$new_ip_address" -o "$old_routers" != "$new_file_routers" ];
	    then
		/usr/local/sbin/policy_route_dhcp.sh "$interface"
		/usr/local/sbin/firewall_interface1.sh
	    fi
	    if [ -n "$USE_DY_FI" ];
	    then
		/usr/local/sbin/update_dy_fi_address.sh "$interface" "$IF_PUB1_DY_NAME"
	    fi
	fi
	
	if [ "$interface" = "$IF_PUB2" ];
	then
	    logger "$interface ($reason): IP: $old_ip_address -> $new_ip_address; GW: $old_routers -> $new_file_routers"
	    sync
	fi
	if [ "$interface" = "$IF_PUB2" -a $(if_has_ip "$IF_PUB0") = "1" ];
	then
	    if [ "$reason" = "BOUND" -o "$reason" = "REBOOT" ];
	    then
		/usr/local/sbin/policy_route_dhcp.sh "$interface"
		/usr/local/sbin/firewall_interface2.sh
	    elif [ "$old_ip_address" != "$new_ip_address" -o "$old_routers" != "$new_file_routers" ];
	    then
		/usr/local/sbin/policy_route_dhcp.sh "$interface"
		/usr/local/sbin/firewall_interface2.sh
	    fi
	    if [ -n "$USE_DY_FI" ];
	    then
		/usr/local/sbin/update_dy_fi_address.sh "$interface" "$IF_PUB2_DY_NAME"
	    fi
	fi

	# Releasing the lock acquired in dhclient-enter-hooks.d/handle-dhcp-routes
	drop_lock "$interface"
	
	;;

esac

